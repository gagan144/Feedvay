# Copyright (C) 2017 Feedvay (Gagandeep Singh: singh.gagan144@gmail.com) - All Rights Reserved
# Content in this document can not be copied and/or distributed without the express
# permission of Gagandeep Singh.
from django.db import transaction
import json

from languages.models import Language, Translation
from form_builder.utils import GeoLocation

def create_update_form(form, form_data, translation):
    """
    Method to create new form or update existing one. This method encapsulates
    all heavy operations required to save a form.

    :param form: Instance of :class:`form_builder.models.Form` or any inherited model.
        In case of new form, create a memory unsaved instance and pass it as parameter.
    :param form_data: Heavy JSON form data as generated by form_builder tool.
    :param translation: Translation JSON containing all new or old translations.
    :return: Save form instance
    """
    with transaction.atomic():
        schema_str = json.dumps(form_data.get('schema', []))

        # --- Translation ---
        lookup_trans_id = {}    # Lookup for UI id to actual db id
        for tid, trans_data in translation.iteritems():
            if tid.startswith('NEW'):
                new_trans = Translation.objects.create(
                    is_paragraph = trans_data.get('is_paragraph', False),
                    sentence = trans_data['sentence'],
                    translations = trans_data.get('translations', {})
                )
                lookup_trans_id[tid] = str(new_trans.pk)

                # Replace translationIDs in schema with db IDs
                schema_str = schema_str.replace(tid, str(new_trans.pk))
            else:
                lookup_trans_id[tid] = tid
                Translation.objects(
                    id = tid
                ).update_one(
                    set__is_paragraph = trans_data.get('is_paragraph', False),
                    set__sentence = trans_data['sentence'],
                    set__translations = trans_data.get('translations', {}),
                    upsert=True
                )

        # --- Form save ---
        form.title = form_data['title']
        form.description = lookup_trans_id.get(form_data.get('description', None), None)
        form.instructions = lookup_trans_id.get(form_data.get('instructions', None), None)
        form.user_notes = form_data.get('user_notes', None)

        # -- languages --
        language_codes = form_data.get('language_codes', [])
        if len(language_codes):
            list_langs = []
            for code in language_codes:
                lang = Language.objects.get(code=code)
                list_langs.append(lang)
            form.languages = list_langs
        else:
            form.languages.clear()

        # -- Constants --
        constants_corrected =  form_data.get('constants', [])
        for cons in constants_corrected:
            if cons.has_key('text_translation_id'):
                cons['text_translation_id'] = lookup_trans_id.get(cons['text_translation_id'], None)
        form.constants = constants_corrected

        # -- Schema --
        schema_json = json.loads(schema_str)
        form.schema = schema_json

        # -- CalculatedFields --
        calc_flds_corrected =  form_data.get('calculated_fields', [])
        for calFld in calc_flds_corrected:
            if calFld.has_key('text_translation_id'):
                calFld['text_translation_id'] = lookup_trans_id.get(calFld['text_translation_id'], None)
        form.calculated_fields = calc_flds_corrected

        timeout = form_data.get('timeout', None)
        if timeout == '':
            timeout = None
        form.timeout = timeout
        form.show_timer = form_data.get('show_timer', False)
        form.randomize = form_data.get('randomize', False)
        form.gps_enabled = form_data.get('gps_enabled', False)
        form.gps_mandatory = form_data.get('gps_mandatory', False)
        form.gps_precision = form_data.get('gps_precision', GeoLocation.FINE)

        form.save()

    return form
